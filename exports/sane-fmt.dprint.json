{
  "$schema": "https://dprint.dev/schemas/v0.json",
  "typescript": {
    "indentWidth": 2,
    "lineWidth": 120,
    "useTabs": false,
    "newLineKind": "lf",
    "quoteStyle": "preferSingle",
    "quoteProps": "asNeeded",
    "semiColons": "asi",
    "arrowFunction.useParentheses": "preferNone",
    "binaryExpression.linePerExpression": false,
    "conditionalExpression.linePerExpression": true,
    "jsx.quoteStyle": "preferSingle",
    "jsx.multiLineParens": "never",
    "jsx.forceNewLinesSurroundingContent": false,
    "jsxOpeningElement.bracketPosition": "nextLine",
    "jsxSelfClosingElement.bracketPosition": "nextLine",
    "memberExpression.linePerExpression": false,
    "typeLiteral.separatorKind.singleLine": "comma",
    "typeLiteral.separatorKind.multiLine": "semiColon",
    "module.sortImportDeclarations": "caseSensitive",
    "module.sortExportDeclarations": "caseSensitive",
    "importDeclaration.sortNamedImports": "maintain",
    "exportDeclaration.sortNamedExports": "maintain",
    "ignoreNodeCommentText": "sane-fmt-ignore",
    "ignoreFileCommentText": "sane-fmt-ignore-file",
    "arrowFunction.bracePosition": "sameLine",
    "classDeclaration.bracePosition": "sameLine",
    "classExpression.bracePosition": "sameLine",
    "constructor.bracePosition": "sameLine",
    "doWhileStatement.bracePosition": "sameLine",
    "enumDeclaration.bracePosition": "sameLine",
    "getAccessor.bracePosition": "sameLine",
    "ifStatement.bracePosition": "sameLine",
    "interfaceDeclaration.bracePosition": "sameLine",
    "forStatement.bracePosition": "sameLine",
    "forInStatement.bracePosition": "sameLine",
    "forOfStatement.bracePosition": "sameLine",
    "functionDeclaration.bracePosition": "sameLine",
    "functionExpression.bracePosition": "sameLine",
    "method.bracePosition": "sameLine",
    "moduleDeclaration.bracePosition": "sameLine",
    "setAccessor.bracePosition": "sameLine",
    "staticBlock.bracePosition": "sameLineUnlessHanging",
    "switchCase.bracePosition": "sameLine",
    "switchStatement.bracePosition": "sameLine",
    "tryStatement.bracePosition": "sameLine",
    "whileStatement.bracePosition": "sameLine",
    "arguments.preferHanging": "never",
    "arrayExpression.preferHanging": "never",
    "arrayPattern.preferHanging": false,
    "doWhileStatement.preferHanging": false,
    "exportDeclaration.preferHanging": false,
    "extendsClause.preferHanging": false,
    "forStatement.preferHanging": false,
    "forInStatement.preferHanging": false,
    "forOfStatement.preferHanging": false,
    "ifStatement.preferHanging": false,
    "implementsClause.preferHanging": false,
    "importDeclaration.preferHanging": false,
    "jsxAttributes.preferHanging": false,
    "objectExpression.preferHanging": false,
    "objectPattern.preferHanging": false,
    "parameters.preferHanging": "never",
    "sequenceExpression.preferHanging": false,
    "switchStatement.preferHanging": false,
    "tupleType.preferHanging": "never",
    "typeLiteral.preferHanging": false,
    "typeParameters.preferHanging": "never",
    "unionAndIntersectionType.preferHanging": false,
    "variableStatement.preferHanging": false,
    "whileStatement.preferHanging": false,
    "enumDeclaration.memberSpacing": "maintain",
    "ifStatement.nextControlFlowPosition": "sameLine",
    "tryStatement.nextControlFlowPosition": "sameLine",
    "doWhileStatement.nextControlFlowPosition": "sameLine",
    "binaryExpression.operatorPosition": "sameLine",
    "conditionalExpression.operatorPosition": "nextLine",
    "conditionalType.operatorPosition": "nextLine",
    "ifStatement.singleBodyPosition": "maintain",
    "forStatement.singleBodyPosition": "maintain",
    "forInStatement.singleBodyPosition": "maintain",
    "forOfStatement.singleBodyPosition": "maintain",
    "whileStatement.singleBodyPosition": "maintain",
    "arguments.trailingCommas": "onlyMultiLine",
    "parameters.trailingCommas": "onlyMultiLine",
    "arrayExpression.trailingCommas": "onlyMultiLine",
    "arrayPattern.trailingCommas": "onlyMultiLine",
    "enumDeclaration.trailingCommas": "onlyMultiLine",
    "exportDeclaration.trailingCommas": "onlyMultiLine",
    "importDeclaration.trailingCommas": "onlyMultiLine",
    "objectPattern.trailingCommas": "onlyMultiLine",
    "objectExpression.trailingCommas": "onlyMultiLine",
    "tupleType.trailingCommas": "onlyMultiLine",
    "typeLiteral.trailingCommas": "onlyMultiLine",
    "typeParameters.trailingCommas": "onlyMultiLine",
    "ifStatement.useBraces": "whenNotSingleLine",
    "forStatement.useBraces": "whenNotSingleLine",
    "forOfStatement.useBraces": "whenNotSingleLine",
    "forInStatement.useBraces": "whenNotSingleLine",
    "whileStatement.useBraces": "whenNotSingleLine",
    "arrayExpression.preferSingleLine": false,
    "arrayPattern.preferSingleLine": false,
    "arguments.preferSingleLine": false,
    "binaryExpression.preferSingleLine": false,
    "computed.preferSingleLine": false,
    "conditionalExpression.preferSingleLine": true,
    "conditionalType.preferSingleLine": false,
    "decorators.preferSingleLine": false,
    "exportDeclaration.preferSingleLine": true,
    "forStatement.preferSingleLine": false,
    "importDeclaration.preferSingleLine": true,
    "jsxAttributes.preferSingleLine": false,
    "jsxElement.preferSingleLine": false,
    "mappedType.preferSingleLine": false,
    "memberExpression.preferSingleLine": false,
    "objectExpression.preferSingleLine": false,
    "objectPattern.preferSingleLine": false,
    "parameters.preferSingleLine": false,
    "parentheses.preferSingleLine": false,
    "tupleType.preferSingleLine": false,
    "typeLiteral.preferSingleLine": false,
    "typeParameters.preferSingleLine": false,
    "unionAndIntersectionType.preferSingleLine": false,
    "variableStatement.preferSingleLine": false,
    "importDeclaration.forceSingleLine": false,
    "exportDeclaration.forceSingleLine": false,
    "exportDeclaration.forceMultiLine": false,
    "importDeclaration.forceMultiLine": false,
    "binaryExpression.spaceSurroundingBitwiseAndArithmeticOperator": true,
    "commentLine.forceSpaceAfterSlashes": false,
    "constructSignature.spaceAfterNewKeyword": true,
    "constructor.spaceBeforeParentheses": false,
    "constructorType.spaceAfterNewKeyword": true,
    "doWhileStatement.spaceAfterWhileKeyword": true,
    "exportDeclaration.spaceSurroundingNamedExports": true,
    "forStatement.spaceAfterForKeyword": true,
    "forStatement.spaceAfterSemiColons": true,
    "forInStatement.spaceAfterForKeyword": true,
    "forOfStatement.spaceAfterForKeyword": true,
    "functionDeclaration.spaceBeforeParentheses": false,
    "functionExpression.spaceBeforeParentheses": false,
    "functionExpression.spaceAfterFunctionKeyword": true,
    "getAccessor.spaceBeforeParentheses": false,
    "ifStatement.spaceAfterIfKeyword": true,
    "importDeclaration.spaceSurroundingNamedImports": true,
    "jsxExpressionContainer.spaceSurroundingExpression": false,
    "jsxSelfClosingElement.spaceBeforeSlash": true,
    "method.spaceBeforeParentheses": false,
    "objectExpression.spaceSurroundingProperties": true,
    "objectPattern.spaceSurroundingProperties": true,
    "setAccessor.spaceBeforeParentheses": false,
    "spaceSurroundingProperties": true,
    "taggedTemplate.spaceBeforeLiteral": false,
    "typeAnnotation.spaceBeforeColon": false,
    "typeAssertion.spaceBeforeExpression": true,
    "typeLiteral.spaceSurroundingProperties": true,
    "whileStatement.spaceAfterWhileKeyword": true,
    "arguments.spaceAround": false,
    "arrayExpression.spaceAround": false,
    "arrayPattern.spaceAround": false,
    "catchClause.spaceAround": false,
    "doWhileStatement.spaceAround": false,
    "forInStatement.spaceAround": false,
    "forOfStatement.spaceAround": false,
    "forStatement.spaceAround": false,
    "ifStatement.spaceAround": false,
    "parameters.spaceAround": false,
    "parenExpression.spaceAround": false,
    "switchStatement.spaceAround": false,
    "tupleType.spaceAround": false,
    "whileStatement.spaceAround": false
  }
}
