name: Deployment

on:
  push:
    tags:
      - '*.*.*'

jobs:
  test:
    name: Test

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: clippy, rustfmt
          override: 'true'
          default: 'true'

      - name: Build
        run: cargo build --locked

      - name: Test
        run: cargo test

      - name: Check formatting
        if: runner.os == 'Linux'
        run: ./fmt.sh

      - name: Clippy check
        if: runner.os == 'Linux'
        run: ./clippy.sh

  build_linux:
    name: Build

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          target: ${{ matrix.target }}
          override: 'true'
          default: 'true'

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Strip all debug symbols
        run: strip --strip-all target/${{ matrix.target }}/release/sane-fmt

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: sane-fmt-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/sane-fmt

  build_macos:
    name: Build

    runs-on: macos-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-apple-darwin

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          target: ${{ matrix.target }}
          override: 'true'
          default: 'true'

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Strip all debug symbols
        run: strip target/${{ matrix.target }}/release/sane-fmt

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: sane-fmt-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/sane-fmt

  build_windows:
    name: Build

    runs-on: windows-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          target: ${{ matrix.target }}
          override: 'true'
          default: 'true'

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: sane-fmt-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/sane-fmt.exe

  build_wasm:
    name: Build

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          target: ${{ matrix.target }}
          override: 'true'
          default: 'true'

      - name: Install cargo wasi
        run: cargo install cargo-wasi

      - name: Build
        run: cargo wasi build --release

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: sane-fmt-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/sane-fmt.wasm

  create_release:
    name: Create Release

    needs:
      - test
      - build_linux
      - build_macos
      - build_windows
      - build_wasm

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_type: ${{ steps.release_type.outputs.release_type }}
      is_release: ${{ steps.release_type.outputs.is_release }}
      is_prerelease: ${{ steps.release_type.outputs.is_prerelease }}
      release_tag: ${{ steps.release_type.outputs.release_tag }}

    steps:
      - uses: actions/checkout@v3

      - name: Install APT packages
        run: sudo apt install -y python3

      - name: Determine release type
        id: release_type
        run: ./ci/github-actions/release-type.py3
        env:
          RELEASE_TAG: ${{ github.ref }}

      - name: Create Release
        id: create_release
        if: steps.release_type.outputs.is_release == 'true'
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_type.outputs.release_tag }}
          release_name: ${{ steps.release_type.outputs.release_tag }}
          draft: 'false'
          prerelease: ${{ steps.release_type.outputs.is_prerelease }}

  upload_generated_files:
    name: Upload Generated Files

    needs:
      - create_release
      - test

    runs-on: ubuntu-latest

    if: needs.create_release.outputs.is_release == 'true'

    steps:
      - uses: actions/checkout@v3

      - name: Upload Dprint configuration
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./exports/sane-fmt.dprint.json
          asset_name: sane-fmt.dprint.json
          asset_content_type: application/json

      - name: Upload TypeScript configuration
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./exports/sane-fmt.typescript.json
          asset_name: sane-fmt.typescript.json
          asset_content_type: application/json

      - name: Upload Tab-Completion file for Bash
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./exports/completion.bash
          asset_name: completion.bash
          asset_content_type: text/plain

      - name: Upload Tab-Completion file for Fish
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./exports/completion.fish
          asset_name: completion.fish
          asset_content_type: text/plain

      - name: Upload Tab-Completion file for Zsh
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./exports/completion.zsh
          asset_name: completion.zsh
          asset_content_type: text/plain

      - name: Upload Tab-Completion file for Elvish
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./exports/completion.elv
          asset_name: completion.elv
          asset_content_type: text/plain

      - name: Upload Tab-Completion file for PowerShell
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./exports/completion.ps1
          asset_name: completion.ps1
          asset_content_type: text/plain

  upload_release_assets:
    name: Upload Release Assets

    needs:
      - create_release
      - test
      - build_linux
      - build_macos
      - build_windows
      - build_wasm

    runs-on: ubuntu-latest

    if: needs.create_release.outputs.is_release == 'true'

    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: sane-fmt-${{ matrix.target }}

      - name: Release executable (non-Windows, non-WASM)
        if: "!contains(matrix.target, 'windows') && !contains(matrix.target, 'wasm')"
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sane-fmt
          asset_name: sane-fmt-${{ matrix.target }}
          asset_content_type: application/x-pie-executable

      - name: Release executable (WASM)
        if: contains(matrix.target, 'wasm')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sane-fmt.wasm
          asset_name: sane-fmt-${{ matrix.target }}.wasm
          asset_content_type: application/wasm

      - name: Release executable (Windows)
        if: contains(matrix.target, 'windows')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sane-fmt.exe
          asset_name: sane-fmt-${{ matrix.target }}.exe
          asset_content_type: application/x-dosexec

  upload_checksums:
    name: Upload Checksums

    needs:
      - create_release
      - test
      - build_linux
      - build_macos
      - build_windows
      - build_wasm

    if: needs.create_release.outputs.is_release == 'true'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3.0.2
        with:
          path: ./downloads

      - name: Flatten directory
        run: ./ci/github-actions/expose-release-artifacts.sh

      - name: Create checksums
        run: ./ci/github-actions/create-checksums.sh

      - name: Upload as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: checksums
          path: sha*sum.txt

      - name: Release sha1sum
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sha1sum.txt
          asset_name: sha1sum.txt
          asset_content_type: text/plain

      - name: Release sha256sum
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sha256sum.txt
          asset_name: sha256sum.txt
          asset_content_type: text/plain

      - name: Release sha512sum
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./sha512sum.txt
          asset_name: sha512sum.txt
          asset_content_type: text/plain

  publish_npm_packages:
    name: Publish NPM packages

    needs:
      - create_release
      - test
      - build_linux
      - build_macos
      - build_windows
      - build_wasm

    if: needs.create_release.outputs.is_release == 'true'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3.0.2
        with:
          path: ./nodejs/${{ matrix.target }}/
          name: sane-fmt-${{ matrix.target }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.10.0'

      - name: Cache PNPM store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store/v3
          key: pnpm5-${{ github.job }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm5-${{ github.job }}-${{ hashFiles('**/pnpm-lock.yaml') }}
            pnpm5-${{ github.job }}-
            pnpm5-

      - name: Install pnpm packages
        uses: pnpm/action-setup@v2.2.4
        with:
          version: '7.13.4'
          run_install: 'true'

      - name: Compile TypeScript
        run: ./compile-typescript.sh

      - name: Publish NPM package
        env:
          IS_PRERELEASE: ${{ needs.create_release.outputs.is_prerelease == true }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          TARGET: ${{ matrix.target }}
        run: ./ci/github-actions/publish-npm-package.py3

  publish_deno_module:
    name: Publish Deno module

    needs:
      - create_release
      - test
      - build_wasm

    if: needs.create_release.outputs.is_release == 'true'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v3

      - name: Install APT packages
        run: sudo apt install -y python3 python3-toml

      - name: Get package info
        id: package_info
        run: ./ci/github-actions/package-info.py3

      - name: Cache Deno modules
        timeout-minutes: 1
        continue-on-error: true
        uses: actions/cache@v3
        with:
          path: ~/.cache/deno
          key: deno-${{ runner.os }}
          restore-keys: |
            deno-${{ runner.os }}
            deno-

      - name: Install Deno
        uses: denolib/setup-deno@v2.3.0
        with:
          deno-version: 1.8.0

      - name: Clone sane-fmt/deno
        run: git clone https://github.com/sane-fmt/deno.git sane-fmt-deno

      - name: Refresh and Test
        run: |
          deno cache --unstable sane-fmt-deno/**/*.{ts,js}
          ./sane-fmt-deno/scripts/test.ts

      - name: Download the WASI binary
        uses: actions/download-artifact@v3.0.2
        with:
          name: sane-fmt-${{ matrix.target }}
          path: .

      - name: Generate the new version of sane-fmt/deno
        env:
          VERSION: ${{ steps.package_info.outputs.version }}
          DESCRIPTION: ${{ steps.package_info.outputs.description }}
          FILENAME: sane-fmt.wasm
        run: |
          flags=(
            --tag "$VERSION"
            --description "$DESCRIPTION"
            --filename "$FILENAME"
          )
          ./sane-fmt-deno/scripts/generate.ts "${flags[@]}"

      - name: Refresh and Test
        run: |
          deno cache --unstable sane-fmt-deno/**/*.{ts,js}
          ./sane-fmt-deno/scripts/test.ts

      - name: Configure git password
        env:
          GIT_USERNAME: KSXGitHub
          GIT_PASSWORD: ${{ secrets.DENO_REPO_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.DENO_REPO_COMMIT_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.DENO_REPO_COMMIT_EMAIL }}
        run: |
          if [[ -z "$GIT_PASSWORD" ]]; then
            echo '::error::secrets.DENO_REPO_TOKEN is missing'
            exit 1
          fi

          cd sane-fmt-deno

          echo Configuring git...
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"

          echo Setting up credentials...
          echo "username=$GIT_USERNAME" >> /tmp/git-login.txt
          echo "password=$GIT_PASSWORD" >> /tmp/git-login.txt
          echo '#! /bin/bash' >> /tmp/git-credential-helper
          echo 'cat /tmp/git-login.txt' >> /tmp/git-credential-helper
          chmod +x /tmp/git-credential-helper
          git config credential.helper '/tmp/git-credential-helper'

      - name: Publish the changes
        env:
          VERSION: ${{ steps.package_info.outputs.version }}
        run: |
          cd sane-fmt-deno
          echo STAGING...
          git add -v .
          echo CREATING COMMIT...
          git commit --allow-empty -m "$VERSION"
          echo CREATING TAG...
          git tag "$VERSION"
          echo PUSHING...
          git push -u origin --tags master

  publish_aur_package:
    name: Publish AUR package

    needs:
      - create_release
      - test
      - build_linux
      - upload_release_assets

    if: needs.create_release.outputs.release_type == 'official'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v3

      - name: Download checksums
        uses: actions/download-artifact@v3.0.2
        with:
          name: checksums
          path: ./checksums

      - name: Generate PKGBUILD
        env:
          TARGET: ${{ matrix.target }}
          RELEASE_TAG: ${{ needs.create_release.outputs.release_tag }}
        run: ./ci/github-actions/generate-pkgbuild.py3

      - name: Publish sane-fmt to the AUR
        uses: KSXGitHub/github-actions-deploy-aur@v2.5.0
        with:
          pkgname: sane-fmt
          pkgbuild: ./pkgbuild/sane-fmt/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: ${{ needs.create_release.outputs.release_tag }}
          force_push: 'true'

      - name: Publish sane-fmt-bin to the AUR
        uses: KSXGitHub/github-actions-deploy-aur@v2.5.0
        with:
          pkgname: sane-fmt-bin
          pkgbuild: ./pkgbuild/sane-fmt-bin/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: ${{ needs.create_release.outputs.release_tag }}
          force_push: 'true'

  publish_cargo_crate:
    name: Publish Cargo crate

    needs:
      - create_release
      - test

    if: needs.create_release.outputs.release_type == 'official'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: 'true'
          default: 'true'

      - name: Login
        run: cargo login ${{ secrets.CRATE_AUTH_TOKEN }}

      - name: List
        run: cargo package --list

      - name: Publish
        run: cargo publish

  publish_github_actions:
    name: Publish GitHub Action

    needs:
      - create_release
      - test
      - upload_release_assets

    if: needs.create_release.outputs.release_type == 'official'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.10.0'

      - name: Cache PNPM store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store/v3
          key: pnpm5-${{ github.job }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm5-${{ github.job }}-${{ hashFiles('**/pnpm-lock.yaml') }}
            pnpm5-${{ github.job }}-
            pnpm5-

      - name: Install pnpm packages
        uses: pnpm/action-setup@v2.2.4
        with:
          version: '7.13.4'
          run_install: 'true'

      - name: Publish GitHub Action
        env:
          RELEASE_TAG: ${{ needs.create_release.outputs.release_tag }}
          GIT_PASSWORD: ${{ secrets.GHACT_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.GHACT_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GHACT_EMAIL }}
        run: ./ci/github-actions/publish-github-action.js
